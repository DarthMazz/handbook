AWSTemplateFormatVersion: "2010-09-09"
Description: Python Lambda Function deployed via CloudFormation

Parameters:
  FunctionName:
    Type: String
    Description: Name of the Lambda function
    Default: MyPythonFunction
  Handler:
    Type: String
    Description: Lambda function handler (e.g., main.handler)
    Default: main.handler
  Runtime:
    Type: String
    Description: Lambda function runtime
    Default: python3.12
    AllowedValues:
      - python3.8
      - python3.9
      - python3.10
      - python3.11
      - python3.12
  MemorySize:
    Type: Number
    Description: Memory allocated to the Lambda function (in MB)
    Default: 128
  Timeout:
    Type: Number
    Description: Lambda function timeout (in seconds)
    Default: 30
  SourceCodeBucketName:
    Type: String
    Description: Name of the S3 bucket containing the Lambda function code
  SourceCodeKey:
    Type: String
    Description: Key of the Lambda function code ZIP file in S3

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*:*:*
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:Put*
                  - s3:List*
                Resource: !Sub "arn:aws:s3:::${SourceCodeBucketName}/*"
              - Effect: "Allow"
                Action: "bedrock:*"
                Resource: "*"
  PythonLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionName
      Handler: !Ref Handler
      Runtime: !Ref Runtime
      MemorySize: !Ref MemorySize
      Timeout: !Ref Timeout
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref SourceCodeBucketName
          S3_KEY: !Ref SourceCodeKey
      Code:
        ZipFile: |
          import json
          import os
          import zipfile
          import io
          import boto3
          s3 = boto3.client('s3')
          bedrock = boto3.client(service_name='bedrock-runtime', region_name='ap-northeast-1')
          model_id = os.environ.get('BEDROCK_MODEL_ID')
          # model_id = 'apac.amazon.nova-pro-v1:0'

          # プロンプトの作成
          prompt = "日本の横浜について教えてください。"
          body = json.dumps({
              "messages": [
                  {
                      "role": "user",
                      "content": [
                          {
                              "text": prompt
                          }
                      ]
                  }
              ],
              "inferenceConfig": {
                  "max_new_tokens": 4096,
              }
          })
          # コンテンツタイプ
          content_type = 'application/json'
          accept = 'application/json'


          def handler(event, context):
              print("starting")
              print(f"{event=}")
              print(f"{context=}")
              try:
                # Bedrock へのリクエスト送信
                response = bedrock.invoke_model(
                    body=body,
                    modelId=model_id,
                    accept=accept,
                    contentType=content_type
                )
                response_body = json.loads(response.get('body').read())
                print(f"{response_body=}")
                print(f"{response_body['output']['message']['content']=}")
                print(f"{response_body['usage']=}")
                print(f"{response_body['stopReason']=}")

              except Exception as e:
                  print(f"エラーが発生しました: {e}")
              return {
                  'statusCode': 200,
                  'body': json.dumps({'message': "message"})
              }

