AWSTemplateFormatVersion: "2010-09-09"
Description: A simple REST API with AWS Lambda integration using CloudFormation.

Parameters:
  ApiName:
    Type: String
    Description: The name of the API Gateway REST API.
    Default: MySimpleApi
  StageName:
    Type: String
    Description: The name of the deployment stage.
    Default: prod
  FunctionName:
    Type: String
    Description: Name of the Lambda function
    Default: MyApiHandlerFunction
  Handler:
    Type: String
    Description: Lambda function handler (e.g., main.handler)
    Default: main.handler
  Runtime:
    Type: String
    Description: Lambda function runtime
    Default: python3.12
    AllowedValues:
      - python3.12
  MemorySize:
    Type: Number
    Description: Memory allocated to the Lambda function (in MB)
    Default: 128
  Timeout:
    Type: Number
    Description: Lambda function timeout (in seconds)
    Default: 30
Resources:
  # IAM Role for the Lambda function to execute and write logs
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${FunctionName}-ExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${FunctionName}:*"

  PythonLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionName
      Architectures:
        - arm64
      Handler: !Ref Handler
      Runtime: !Ref Runtime
      MemorySize: !Ref MemorySize
      Timeout: !Ref Timeout
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json

          def handler(event, context):
              # This is a simple handler that returns a static response.
              # The response format is what API Gateway's Lambda proxy integration expects.
              print(f"Received event: {json.dumps(event)}")
              return {
                  'statusCode': 200,
                  'headers': {
                      'Content-Type': 'application/json'
                  },
                  'body': json.dumps({'message': "Hello from Lambda!"})
              }

  # API Gateway REST API
  MyApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ApiName
      Body:
        openapi: 3.0.1
        info:
          title: !Ref ApiName
          version: '1.0'
        paths:
          /items:
            get:
              summary: Get all items
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonLambdaFunction.Arn}/invocations"
                passthroughBehavior: when_no_match

  # Permission for API Gateway to invoke the Lambda function
  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PythonLambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/GET/items"

  # API Gateway Deployment
  # IMPORTANT: To redeploy the API after changing the OpenAPI definition,
  # you must change the logical ID of this resource (e.g., ApiDeployment2, ApiDeploymentV2).
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref MyApi

  # API Gateway Stage (e.g., prod)
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: !Ref StageName
      RestApiId: !Ref MyApi
      DeploymentId: !Ref ApiDeployment

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL for the deployed stage"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/items"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"
